/* grainc-flags --no-gc */

import WasmI32, { add as (+) } from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"
import Memory from "runtime/unsafe/memory"
import Conv from "runtime/unsafe/conv"

import Env from "./nearEnv"

export let _KEY_PTR = Memory.malloc(16n)
export let _KEY_LEN = 8n

export let _VAL_PTR = _KEY_PTR + _KEY_LEN
export let _VAL_LEN = 4n

let _REG = 0N

export let setCounter = val => {
  // Write the value to memory.
  WasmI32.store(_VAL_PTR, Conv.fromInt32(val), 0n)

  // Tell the host where the key and value are located and their lengths.
  // If there is an old value it is written to _REG.

  let _KEY_LEN = WasmI64.extendI32S(_KEY_LEN)
  let _KEY_PTR = WasmI64.extendI32S(_KEY_PTR)
  let _VAL_LEN = WasmI64.extendI32S(_VAL_LEN)
  let _VAL_PTR = WasmI64.extendI32S(_VAL_PTR)

  Env.storageWrite(_KEY_LEN, _KEY_PTR, _VAL_LEN, _VAL_PTR, _REG)
  void
}

export let loadCounter = () => {
  // Check if key is in storage
  let _KEY_LEN = WasmI64.extendI32S(_KEY_LEN)
  let _KEY_PTR = WasmI64.extendI32S(_KEY_PTR)

  if (WasmI64.eqz(Env.storageHasKey(_KEY_LEN, _KEY_PTR))) {
    // Initialize to zero.
    setCounter(0l)
  }

  // Read the value into _REG

  Env.storageRead(_KEY_LEN, _KEY_PTR, _REG)
  // Next write the value to memory.
  // Normally we'd want to use `Env.registerLen` to allocate the correct amount of space.
  // However, we already know the length of the value.

  Env.readRegister(_REG, WasmI64.extendI32S(_VAL_PTR))
  // Load the value from memory

  Conv.toInt32(WasmI32.load(_VAL_PTR, 0n))
}
