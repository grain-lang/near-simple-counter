/* grainc-flags --no-gc --no-bulk-memory */

import Int32, { add as (+), sub as (-) } from "int32"
import WasmI32 from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"

import Env from "./nearEnv"
import { setCounter, loadCounter } from "./counter"

export let increment = () => {
  setCounter((loadCounter()) + 1l)
}

export let decrement = () => {
  setCounter((loadCounter()) - 1l)
}

export let getCounter = () => {
  let value = toString(loadCounter())
  let length = WasmI64.load32U(WasmI32.fromGrain(value), 4n)
  let ptr = WasmI64.extendI32U(WasmI32.add(WasmI32.fromGrain(value), 8n))
  Env.valueReturn(length, ptr)
}
